{
    "contents" : "# Copyright (C) 2008 Jean-Pierre Gattuso and Heloise Lavigne and Aurelien Proye\n# with a most valuable contribution of Bernard Gentili <gentili@obs-vlfr.fr>\n# and valuable suggestions from Jean-Marie Epitalon <epitalon@lsce.saclay.cea.fr>\n#\n# This file is part of seacarb.\n#\n# Seacarb is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or any later version.\n#\n# Seacarb is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License along with seacarb; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n#\n#\n\nbuffer <- \n  function(flag, var1, var2, S=35, T=25, P=0, Pt=0, Sit=0, k1k2='x', kf='x', ks=\"d\", pHscale=\"T\", b=\"l10\"){\n    \n    n <- max(length(flag), length(var1), length(var2), length(S), length(T), length(P), length(Pt), length(Sit), length(k1k2), length(kf), length(pHscale), length(ks), length(b))\n    if(length(flag)!=n){ flag <- rep(flag[1],n)}\n    if(length(var1)!=n){ var1 <- rep(var1[1],n)}\n    if(length(var2)!=n){ var2 <- rep(var2[1],n)}\n    if(length(S)!=n){ S <- rep(S[1],n)}\n    if(length(T)!=n){ T <- rep(T[1],n)}\n    if(length(P)!=n){ P <- rep(P[1],n)}\n    if(length(Pt)!=n){ Pt <- rep(Pt[1],n)}\n    if(length(Sit)!=n){ Sit <- rep(Sit[1],n)}\n    if(length(k1k2)!=n){ k1k2 <- rep(k1k2[1],n)}\n    if(length(kf)!=n){ kf <- rep(kf[1],n)}\n    if(length(ks)!=n){ ks <- rep(ks[1],n)}\n    if(length(pHscale)!=n){pHscale <- rep(pHscale[1],n)}\n    if(length(b)!=n){ b <- rep(b[1],n)}\n    \n    Carb <- carb(flag=flag, var1=var1, var2=var2, S=S, T=T, P=P, Pt=Pt, Sit=Sit, k1k2=k1k2, kf=kf, ks=ks, pHscale=pHscale, b=b)\n    \n    PH   <- Carb[5]\n    h    <- 10^(-PH)\n    CO2  <- Carb[6]\n    pCO2 <- Carb[7]\n    fCO2 <- Carb[8]\n    HCO3 <- Carb[9]\n    CO3  <- Carb[10]\n    DIC  <- Carb[11]\n    ALK  <- Carb[12]\n    Oa   <- Carb[13]\n    Oc   <- Carb[14]\n    \n    \n    #-------Constantes----------------\n    \n    tk = 273.15;           # [K] (for conversion [deg C] <-> [K])\n    TK = T + tk;           # TK [K]; T[C]\n    \n    #---- issues de equic----\n    Cl = S / 1.80655;      # Cl = chlorinity; S = salinity (per mille)\n    cl3 = Cl^(1/3);\n    ION = 0.00147 + 0.03592 * Cl + 0.000068 * Cl * Cl;   # ionic strength\n    iom0 = 19.924*S/(1000-1.005*S);\n    ST = 0.14/96.062/1.80655*S;   # (mol/kg soln) total sulfate\n    BOR = bor(S=S , b=b);   # (mol/kg), DOE94 boron total\n    FLUO = (7*(S/35))*1e-5        # (mol/kg), DOE94 fluoride total\n    \n    #---------------------------------------------------------------------\n    #--------------------- calcul des K ----------------------------------\n    #---------------------------------------------------------------------\n    \n    # Ks (free pH scale) at zero pressure and given pressure\n    Ks_P0 <- Ks(S=S, T=T, P=0, ks=ks)\n    Ks    <- Ks(S=S, T=T, P=P, ks=ks)\n    \n    # Kf on free pH scale\n    Kff <- Kf(S=S, T=T, P=P, pHscale=\"F\", kf=kf, Ks_P0, Ks)\n    # Kf on given pH scale\n    Kf <- Kf(S=S, T=T, P=P, pHscale=pHscale, kf=kf, Ks_P0, Ks)\n    \n    # Conversion factor from total to SWS pH scale at zero pressure\n    ktotal2SWS_P0 <- kconv(S=S,T=T,P=0,kf=kf,Ks=Ks,Kff=Kff)$ktotal2SWS\n    # Conversion factor from SWS to chosen pH scale\n    conv <- kconv(S=S,T=T,P=P,kf=kf,Ks=Ks,Kff=Kff)\n    kSWS2chosen <- rep(1.,n)\n    kSWS2chosen [pHscale == \"T\"] <- conv$kSWS2total [pHscale == \"T\"]\n    kSWS2chosen [pHscale == \"F\"] <- conv$kSWS2free [pHscale == \"F\"]  \n    \n    K1 <- K1(S=S, T=T, P=P, pHscale=pHscale, k1k2=k1k2, kSWS2chosen, ktotal2SWS_P0)   \n    K2 <- K2(S=S, T=T, P=P, pHscale=pHscale, k1k2=k1k2, kSWS2chosen, ktotal2SWS_P0)\n    Kw <- Kw(S=S, T=T, P=P, pHscale=pHscale, kSWS2chosen)\n    K0 <- K0(S=S, T=T, P=P)\n    Kb <- Kb(S=S, T=T, P=P, pHscale=pHscale, kSWS2chosen, ktotal2SWS_P0)\n    K1p <- K1p(S=S, T=T, P=P, pHscale=pHscale, kSWS2chosen)\n    K2p <- K2p(S=S, T=T, P=P, pHscale=pHscale, kSWS2chosen)\n    K3p <- K3p(S=S, T=T, P=P, pHscale=pHscale, kSWS2chosen)\n    Ksi <- Ksi(S=S, T=T, P=P, pHscale=pHscale, kSWS2chosen)\n    Kspa <- Kspa(S=S, T=T, P=P)\n    Kspc <- Kspc(S=S, T=T, P=P)\n    \n    rho <- rho(S=S,T=T,P=P)\n    \n    #---------------------------------------------------------------------\n    #--------------------    buffer effects    ---------------------------\n    #---------------------------------------------------------------------\n    \n    DD=-((-Kb*BOR)/((h+Kb)*(h+Kb)))-(-Kw/((h)*(h)))+1;\n    A= (2*K2*(2*CO3+HCO3)+h*(h+2*K2)*DD)/((h+2*K2)*(h+2*K2));\n    B=( ( (2*CO3+HCO3) * h)/((h+2*K2)*K1) + (h/K1)* A );\n    C= (-K2*(2*CO3+HCO3)+K2*(2*K2+h)*DD)/((h+2*K2)*(h+2*K2));\n    PhiD=-1/(h*log(10) * ( B+A+C ) );\n    BetaD=-h*log(10)*DIC/CO2*B*PhiD;\n    \n    \n    Q=(h+2*K2);\n    V=(Kb*BOR)/((h+Kb)*(h+Kb)) + Kw/(h*h)+1;\n    \n    DB=(( K2*(2*CO3+HCO3)+ Q*V *(h+K2)+(h/K1)*( (2*CO3+HCO3)*Q+2*K2*(2*CO3+HCO3)+h*Q*V))/Q)*(1/(Q-(h+K2+h*h/K1)))-((-Kb*BOR)/((h+Kb)*(h+Kb)))-(-Kw/((h)*(h)))+1;\n    A= (2*K2*(2*CO3+HCO3)+h*(h+2*K2)*DB)/((h+2*K2)*(h+2*K2));\n    B=( ( (2*CO3+HCO3) * h)/((h+2*K2)*K1) + (h/K1)* A );\n    C= (-K2*(2*CO3+HCO3)+K2*(2*K2+h)*DB)/((h+2*K2)*(h+2*K2));\n    PhiB=-1/(h*log(10) * ( B+A+C ) );\n    BetaB=-h*log(10)*DIC/CO2*B*PhiB;\n    \n    DC=2*(( K2*(2*CO3+HCO3)+ Q*V *(h+K2)+(h/K1)*( (2*CO3+HCO3)*Q+2*K2*(2*CO3+HCO3)+h*Q*V))/Q)*(1/(Q-2*(h+K2+h*h/K1)))-((-Kb*BOR)/((h+Kb)*(h+Kb)))-(-Kw/((h)*(h)))+1;\n    A= (2*K2*(2*CO3+HCO3)+h*(h+2*K2)*DC)/((h+2*K2)*(h+2*K2));\n    B=( ( (2*CO3+HCO3) * h)/((h+2*K2)*K1) + (h/K1)* A );\n    C= (-K2*(2*CO3+HCO3)+K2*(2*K2+h)*DC)/((h+2*K2)*(h+2*K2));\n    PhiC=-1/(h*log(10) * ( B+A+C ) );\n    BetaC=-h*log(10)*DIC/CO2*B*PhiC;\n    \n    D1=(K1*(K1*K2-h*h)*DIC)   /  ((h*h+h*K1+K1*K2)*(h*h+h*K1+K1*K2));\n    D2=(-K1*K2*(2*h+K1)*DIC)  /  ((h*h+h*K1+K1*K2)*(h*h+h*K1+K1*K2));\n    D=D1+2*D2;\n    PhiH=1/ (h*log(10)* (D +(-Kb*BOR/((h+Kb)*(h+Kb)))  + (-Kw/(h*h))-1))  ; \n    \n    Pi=(h*K1*(h+2*K2)*DIC)  /  ((h*h+h*K1+K1*K2)*(h*h+h*K1+K1*K2));\n    PiH=((-h/K0)*log(10)*Pi)*PhiH;\n    PiB=CO2/(K0*DIC)*BetaB;\n    PiD=CO2/(K0*DIC)*BetaD;\n    PiC=CO2/(K0*DIC)*BetaC;\n    \n    col <- c(\"PhiD\", \"BetaD\", \"PiD\", \"PhiB\", \"BetaB\", \"PiB\", \"PhiC\", \"BetaC\", \"PiC\", \"PhiH\", \"PiH\")\n    res <- data.frame(PhiD,BetaD,PiD,PhiB,BetaB,PiB,PhiC,BetaC,PiC,PhiH,PiH)\n    names(res) <- col \n    \n    return(res)\n  }",
    "created" : 1390233300292.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1077362778",
    "id" : "7B69DDCF",
    "lastKnownWriteTime" : 1390233321,
    "path" : "~/Documents/R-forge/seacarb_folder/seacarb/R/buffer.R",
    "project_path" : "R/buffer.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}